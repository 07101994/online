All communication consists of messages that are one line of
human-readable UTF-8 text optionally followed by a single newline and
binary data.

client -> server
================

load <pathname>

    Deprecated.

load url=<url>

status

tile width=<width> height=<height> tileposx=<xpos> tileposy=<ypos> tilewidth=<tileWidth> tileheight=<tileHeight>

    All parameters are numbers.

key type=<type> char=<charcode> key=<keycode>

    <type> is 'input' or 'up', <charcode> and <keycode> are numbers.

mouse type=<type> x=<x> y=<y> count=<count>

    <type> is 'buttondown', 'buttonup' or 'move', others are numbers.

uno <command>

    <command> is a line of text.

selecttext type=<type> x=<x> y=<y>

    <type> is 'start', 'end' or 'reset', <x> and <y> are numbers.

selectgraphic type=<type> x=<x> y=<y>

    <type> is 'start' or 'end' <x> and <y> are numbers.

resetselection

server -> client
================

error: cmd=<command> kind=<kind>
<freeErrorText>

    <command> is the command part of the corresponding client->server
    message that caused the error. <kind> is some single-word
    classification

status: type=<typeName> parts=<numberOfParts> current=<currentPartNumber> width=<width> height=<height>

    <typeName> is 'text, 'spreadsheet', 'presentation', 'drawing' or 'other. Others are numbers.

tile: width=<width> height=<height> tileposx=<xpos> tileposy=<ypos> tilewidth=<tileWidth> tileheight=<tileHeight> 
<binaryPngImage>

    The parameters from the corresponding 'tile' command.

Each LOK_CALLBACK_FOO_BAR callback causes a corresponding message to
the client, consisting of the FOO_BAR part in lowercase, without
underscore, followed by a colon, space and the callback payload. For
instance:

invalidatetiles: <payload>

invalidatecursor:



The communication between the parent process (the one keeping open the
Websocket connections to the clients) and a child process (handling
one document through LibreOfficeKit) uses the same protocol, with
the following additions and changes:

child -> parent
===============

child <id>

Must be the first message sent from the child to the parent. The
parent has passed the id (a 64-bit random number) to the child when
starting it, so this is how the child identificates itself.
